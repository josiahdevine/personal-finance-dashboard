// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bills         Bill[]
  billMetadata  BillMetadata[]
  plaidAccounts PlaidAccount[]
  plaidItems    PlaidItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?
  name             String
  balance          Float           @default(0)
  currency         String          @default("USD")
  lastUpdated      DateTime        @default(now())
  isManual         Boolean         @default(false)
  notes            String?
  balanceHistory   BalanceHistory[]
  transactions     Transaction[]
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  deleted_at       DateTime?

  @@unique([provider, providerAccountId])
}

enum AccountType {
  ASSET
  LIABILITY
}

model BalanceHistory {
  id        String   @id @default(cuid())
  accountId String
  balance   Float
  date      DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([date])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bill {
  id              String          @id @default(cuid())
  userId          String
  name            String
  amount          Float
  dueDate         DateTime
  category        String
  isRecurring     Boolean         @default(false)
  frequency       String?
  notes           String?
  isManual        Boolean         @default(true)
  lastPaymentDate DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentHistory  PaymentHistory[]

  @@index([userId])
  @@index([dueDate])
}

model BillMetadata {
  id            String  @id @default(cuid())
  userId        String
  plaidBillId   String
  notes         String?
  customCategory String?
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, plaidBillId])
}

model PaymentHistory {
  id          String   @id @default(cuid())
  billId      String
  amount      Float
  paymentDate DateTime
  bill        Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)

  @@index([billId])
  @@index([paymentDate])
}

model PlaidAccount {
  id             String   @id @default(cuid())
  userId         String
  accessToken    String
  itemId         String
  institutionId  String?
  institutionName String?
  status         String   @default("active")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, itemId])
  @@index([userId])
}

model Transaction {
  id          String   @id @default(cuid())
  accountId   String
  amount      Float
  date        DateTime
  description String
  category    String?
  type        String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  deleted_at  DateTime?

  @@index([accountId])
  @@index([date])
}

model Goal {
  id            String  @id @default(cuid())
  userId        String
  name          String
  description   String?
  targetAmount  Float
  currentAmount Float
  startDate     DateTime
  endDate       DateTime
  category      String
  isRecurring   Boolean         @default(false)
  frequency     String?
  notes         String?
  isManual      Boolean         @default(true)
  deleted_at    DateTime?
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startDate])
  @@index([endDate])
}

model PlaidItem {
  id          String   @id @default(cuid())
  userId      String
  itemId      String   @unique
  accessToken String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}
