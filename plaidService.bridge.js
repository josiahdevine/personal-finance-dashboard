// Case sensitivity bridge for plaidService
// Generated by create-component-bridge.js

// Create a dummy plaidService instance
const plaidService = {
  createLinkToken: async (products) => {
    console.log('Creating link token with products:', products);
    return {
      link_token: 'dummy-link-token',
      expiration: new Date(Date.now() + 3600000).toISOString(),
      request_id: 'dummy-request-id'
    };
  },
  exchangePublicToken: async (publicToken, userId) => {
    console.log('Exchanging public token:', publicToken, 'for user:', userId);
    return { success: true };
  },
  getAccounts: async () => [],
  getTransactions: async (options) => {
    // Generate dummy transactions for the last 6 months
    const transactions = [];
    
    // Create one transaction per month
    for (let i = 0; i < 6; i++) {
      const date = new Date();
      date.setMonth(date.getMonth() - i);
      const dateStr = date.toISOString().slice(0, 10);
      
      // Add an income transaction
      transactions.push({
        id: `income-${i}`,
        plaid_transaction_id: `income-${i}`,
        account_id: 'account-1',
        category: ['Income', 'Salary'],
        date: dateStr,
        name: 'Salary Deposit',
        amount: -2000, // Negative amount for income in Plaid
        pending: false,
        currency_code: 'USD',
        payment_channel: 'direct deposit',
        merchant_name: 'Employer'
      });
      
      // Add an expense transaction
      transactions.push({
        id: `expense-${i}`,
        plaid_transaction_id: `expense-${i}`,
        account_id: 'account-1',
        category: ['Expense', 'Rent'],
        date: dateStr,
        name: 'Rent Payment',
        amount: 1500, // Positive amount for expense in Plaid
        pending: false,
        currency_code: 'USD',
        payment_channel: 'online',
        merchant_name: 'Landlord'
      });
    }
    
    // Return the expected format
    return {
      transactions: transactions,
      total: transactions.length,
      start_date: options?.start_date || '',
      end_date: options?.end_date || ''
    };
  },
  syncTransactions: async () => ({ added: 0, modified: 0, removed: 0 }),
  getBalanceHistory: async () => [],
  getInvestmentHoldings: async () => [],
  getInvestmentTransactions: async () => []
};

// Export as both default and named export
export { plaidService };
export default plaidService; 